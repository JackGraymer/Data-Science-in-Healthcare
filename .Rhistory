range = "D244:M244",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range (Q244:T244)
population_oregon_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Oregon",
range = "Q244:T244",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_oregon <- cbind(population_oregon_1, population_oregon_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_oregon) <- 2010:2023
# Load the population data from the first range in California
population_california_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "California",
range = "D487:M487",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range (Q487:T487)
population_california_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "California",
range = "Q487:T487",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_california <- cbind(population_california_1, population_california_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_california) <- 2010:2023
# Load the population data from the first range in Washington
population_washington_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Washington",
range = "D286:M286",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range
population_washington_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Washington",
range = "Q286:T286",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_washington <- cbind(population_washington_1, population_washington_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_washington) <- 2010:2023
# Combine population data into a single data frame with an added column for state
population_data <- bind_rows(
population_oregon %>% mutate(State = "Oregon"),
population_washington %>% mutate(State = "Washington"),
population_california %>% mutate(State = "California")
)
# Remove the temporary variables from the environment
rm(population_oregon_1, population_oregon_2, population_washington_1,
population_washington_2, population_california_1, population_california_2,
population_oregon, population_washington, population_california)
# Convert wide format to long format
population_data <- population_data %>%
pivot_longer(cols = -State,    # All columns except 'State'
names_to = "year",   # The new column for years
values_to = "population_count")  # The new column for population counts
#Convert year collum to numeric
population_data$year <- as.numeric(population_data$year)
# look into Notes
unique(Data$Notes)
# only NA's so we delete this column
Data <- Data %>% select(-Notes)
# look into Dates
unique(Data$Month)
# Delete Row Sep., 2024 since the data is not complete
Data <- Data[Data$Month != "Sep., 2024 (provisional and partial)", ]
# Create column Provisional (TRUE/FALSE) based on the col Month '(provisional)'
Data$Provisional <- grepl("\\(provisional\\)", Data$Month)
# Delete " (provisional)" from the Date
####Data$Month <- gsub(" \\(provisional\\)", "", Data$Month)
# Convert into Date Variable
####Data$Month <- as.yearmon(Data$Month, format = "%b., %Y")
Data <- Data %>%
#mutate(`Month` = as.yearmon(`Month Code`, format = "%Y/%m"))
mutate(`Month` = ym(`Month Code`))
#### look into Deaths
#### Data$Deaths
# count of "Suppressed"
sum(Data$Deaths == "Suppressed")
# Some of the numbers are "Suppressed" this means that there are between 1 and 9 cases
# To use Deaths as a number we can leave them as NA's or substitute by a random number between 1 and 9
# Set seed for reproducibility if needed
set.seed(23)
# Replace "Suppressed" in the Death column with a random number between 1 and 9
Data$Deaths <- ifelse(Data$Deaths == "Suppressed", sample(1:9, sum(Data$Deaths == "Suppressed"), replace = TRUE), Data$Deaths)
Data$Deaths <- as.numeric(Data$Deaths)
summary(Data)
sum(Data$Deaths == "Suppressed")
# Delete all columns that end on Code, they are duplicates of the other columns
Data <- Data[, !grepl("Code$", names(Data))]
glimpse(Data)
# Filter the data for each complete years 2018 to 2023
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Check the structure of the data
str(Data_18_23)
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 10,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_10000 = (Deaths / population_count) * 10000)
# View the result
print(Data_with_population)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_10000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 10,000 Inhabitants (2018-2019)",
x = "Year",
y = "Deaths per 10,000 Inhabitants") +
theme_minimal()
View(population_data)
View(Data_with_population)
View(population_data)
View(Data_with_population)
View(population_data)
View(Data_with_population)
# Filter the data for each complete years 2018 to 2023
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Check the structure of the data
str(Data_18_23)
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# View the result
print(Data_with_population)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants") +
theme_minimal()
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 10000)
# View the result
print(Data_with_population)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants") +
theme_minimal()
```{r Baseline and Trend Analysis}
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# View the result
print(Data_with_population)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants") +
theme_minimal()
View(Data_18_23)
View(Data_with_population)
View(population_data)
View(Data_with_population)
library(readxl)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lmtest)
library(sandwich)
#setting directory
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
Data_with_population <- Data_with_population %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = df)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants") +
theme_minimal()
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = df)
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_with_population)
# Step 3: Get the summary of the model to evaluate the effect
summary(did_model)
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Step 5: Plot the trends over time for each state
ggplot(df, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
# Step 5: Plot the trends over time for each state
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
# Step 5: Plot the trends over time for each state
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewith = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
# Step 5: Plot the trends over time for each state
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
View(Data)
# Group the data by occurrence state and month, then sum deaths per month
Data_monthyl <- Data %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
View(Data_monthyl)
# Plot the trends over time for each state
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
# Group the data by occurrence state and month, then sum deaths per month
Data_monthyl <- Data %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Create 'treatment' and 'post_policy' variables
Data_monthly <- Data_monthly %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
# Group the data by occurrence state and month, then sum deaths per month
Data_monthly <- Data %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Create 'treatment' and 'post_policy' variables
Data_monthly <- Data_monthly %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
View(Data_monthly)
# Difference-in-Differences (DiD) regression model with Deaths
did_model <- lm(Deaths ~ treatment + post_policy + interaction, data = Data_monthly)
# Get the summary of the model to evaluate the effect
summary(did_model)
# Use robust standard errors to handle heteroscedasticity
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = year, y = Deaths, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State",
subtitle = "Oregon policy change in 2021",
x = "Month", y = "Deaths") +
theme_minimal()
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = month, y = Deaths, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State",
subtitle = "Oregon policy change in 2021",
x = "Month", y = "Deaths") +
theme_minimal()
ggplot(Data_monthly, aes(x = year, y = Deaths, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State",
subtitle = "Oregon policy change in 2021",
x = "Month", y = "Deaths") +
theme_minimal()
# Merge the death data with population data by state and year
Data_monthly <- Data_monthly %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
View(population_data)
# Filter the data for each complete month in 2018 to 2023
Data_monthly <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and month, then sum deaths per month
Data_monthly <- Data_monthly %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_monthly <- Data_monthly %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_monthly <- Data_monthly  %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Create 'treatment' and 'post_policy' variables
Data_monthly <- Data_monthly %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
# Difference-in-Differences (DiD) regression model with Deaths
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_monthly)
# Get the summary of the model to evaluate the effect
summary(did_model)
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths") +
theme_minimal()
# Create a new date column by combining year and month
Data_monthly <- Data_monthly %>%
mutate(date = ym(paste(year, month, sep = "-")))  # Combine year and month into a date
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths_per_100000") +
theme_minimal()
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021-02-01, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths_per_100000") +
theme_minimal()
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021-02-01, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths_per_100000") +
theme_minimal()
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths_per_100000") +
theme_minimal()
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
# Difference-in-Differences (DiD) regression model with Deaths_per_100000
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_monthly)
summary(did_model)
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Plot actual vs predicted trends
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2, aes(linetype = "Actual")) +  # Plot actual values
geom_line(aes(y = predicted, linetype = "Predicted"), size = 1) +  # Add predicted values
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Actual vs Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Deaths per 100,000 inhabitants") +
theme_minimal()
# Summarize the data for each state and date
Data_summary <- Data_monthly %>%
group_by(`Occurrence State`, date) %>%
summarise(average_deaths_per_100000 = mean(Deaths_per_100000))
# Plot the trends for each state
ggplot(Data_summary, aes(x = date, y = average_deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Policy change line
labs(title = "Drug-Related Deaths per 100,000 Over Time",
subtitle = "Comparing Oregon with Control States",
x = "Date", y = "Average Deaths per 100,000") +
theme_minimal()
View(Data_summary)
View(Data_monthly)
View(Data_monthly)
View(Data_monthyl)
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`, group = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Adding a continuous time trend to the model
Data_monthly$time <- as.numeric(Data_monthly$date)  # Create a numeric time variable based on the date
# Update the model to include the continuous time trend
did_model_time <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction + time, data = Data_monthly)
# Generate predicted values based on the new model
Data_monthly$predicted <- predict(did_model_time, newdata = Data_monthly)
# Plot the trends again with the continuous time effect
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`, group = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Plot the trends again with the continuous time effect
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`, group = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Update the model to include the continuous time trend
did_model_time <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction + time, data = Data_monthly)
summary(did_model_time)
# Plot the trends again with the continuous time effect
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`, group = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths_per_100000") +
theme_minimal()
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths_per_100000") +
theme_minimal()
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants") +
theme_minimal()
# Robust standard errors to handle heteroscedasticity
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
