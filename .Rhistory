# Difference-in-Differences (DiD) regression model with Deaths_per_100000
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_monthly)
summary(did_model)
# Robust standard errors to handle heteroscedasticity
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# look into Notes
unique(Data$Notes)
# only NA's so we delete this column
Data <- Data %>% select(-Notes)
# look into Notes
unique(Data$Notes)
# look into Dates
unique(Data$Month)
# Delete Row Sep., 2024 since the data is not complete
Data <- Data[Data$Month != "Sep., 2024 (provisional and partial)", ]
# count of "Suppressed"
sum(Data$Deaths == "Suppressed")
# Some of the numbers are "Suppressed" this means that there are between 1 and 9 cases
# To use Deaths as a number we can leave them as NA's or substitute by a random number between 1 and 9
# Set seed for reproducibility if needed
set.seed(23)
# Replace "Suppressed" in the Death column with a random number between 1 and 9
Data$Deaths <- ifelse(Data$Deaths == "Suppressed", sample(1:9, sum(Data$Deaths == "Suppressed"), replace = TRUE), Data$Deaths)
Data$Deaths <- as.numeric(Data$Deaths)
summary(Data)
sum(Data$Deaths == "Suppressed")
# Delete all columns that end on Code, they are duplicates of the other columns
Data <- Data[, !grepl("Code$", names(Data))]
# Filters the data to only include drug-induced deaths (removes alcohol-induced and non-drug related deaths)
Data <- Data %>% filter(`UCD - Drug/Alcohol Induced` == "Drug-induced causes")
glimpse(Data)
# Filter the data for each complete years 2018 to 2023 and make sure to use only durg induced cases
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants")
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants")
gc()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lmtest)
library(sandwich)
library(forecast)
#globally exclude code chunks from the output
knitr::opts_chunk$set(echo = FALSE)
#globally turn on caching
knitr::opts_chunk$set(cache = TRUE)
# globally turn off warnings and messages
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
# globally set the theme for ggplot
theme_set(theme_minimal())
#setting directory
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# load the relevant part of the Data set, exclude notes starting from row 4374
Data <- read_excel("data/Drug_related_Deaths_2018-2024.xlsx", n_max = 4374)
# Overview for the Data
head(Data, 10)
str(Data)
# Read population data from Excel file for each region
# Load the population data from the first range (D244:M244)
population_oregon_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Oregon",
range = "D244:M244",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range (Q244:T244)
population_oregon_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Oregon",
range = "Q244:T244",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_oregon <- cbind(population_oregon_1, population_oregon_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_oregon) <- 2010:2023
# Load the population data from the first range in California
population_california_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "California",
range = "D487:M487",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range (Q487:T487)
population_california_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "California",
range = "Q487:T487",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_california <- cbind(population_california_1, population_california_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_california) <- 2010:2023
# Load the population data from the first range in Washington
population_washington_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Washington",
range = "D286:M286",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range
population_washington_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Washington",
range = "Q286:T286",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_washington <- cbind(population_washington_1, population_washington_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_washington) <- 2010:2023
# Combine population data into a single data frame with an added column for state
population_data <- bind_rows(
population_oregon %>% mutate(State = "Oregon"),
population_washington %>% mutate(State = "Washington"),
population_california %>% mutate(State = "California")
)
# Remove the temporary variables from the environment
rm(population_oregon_1, population_oregon_2, population_washington_1,
population_washington_2, population_california_1, population_california_2,
population_oregon, population_washington, population_california)
# Convert wide format to long format
population_data <- population_data %>%
pivot_longer(cols = -State,    # All columns except 'State'
names_to = "year",   # The new column for years
values_to = "population_count")  # The new column for population counts
#Convert year column to numeric
population_data$year <- as.numeric(population_data$year)
# look into Dates
unique(Data$Month)
# Delete Row Sep., 2024 since the data is not complete
Data <- Data[Data$Month != "Sep., 2024 (provisional and partial)", ]
# Create column Provisional (TRUE/FALSE) based on the col Month '(provisional)'
Data$Provisional <- grepl("\\(provisional\\)", Data$Month)
# Delete " (provisional)" from the Date
####Data$Month <- gsub(" \\(provisional\\)", "", Data$Month)
# Convert into Date Variable
####Data$Month <- as.yearmon(Data$Month, format = "%b., %Y")
Data <- Data %>%
#mutate(`Month` = as.yearmon(`Month Code`, format = "%Y/%m"))
mutate(`Month` = ym(`Month Code`))
#### look into Deaths
#### Data$Deaths
# count of "Suppressed"
sum(Data$Deaths == "Suppressed")
# Some of the numbers are "Suppressed" this means that there are between 1 and 9 cases
# To use Deaths as a number we can leave them as NA's or substitute by a random number between 1 and 9
# Set seed for reproducibility if needed
set.seed(23)
# Replace "Suppressed" in the Death column with a random number between 1 and 9
Data$Deaths <- ifelse(Data$Deaths == "Suppressed", sample(1:9, sum(Data$Deaths == "Suppressed"), replace = TRUE), Data$Deaths)
Data$Deaths <- as.numeric(Data$Deaths)
summary(Data)
sum(Data$Deaths == "Suppressed")
# Delete all columns that end on Code, they are duplicates of the other columns
Data <- Data[, !grepl("Code$", names(Data))]
# Filters the data to only include drug-induced deaths (removes alcohol-induced and non-drug related deaths)
Data <- Data %>% filter(`UCD - Drug/Alcohol Induced` == "Drug-induced causes")
glimpse(Data)
# Filter the data for each complete years 2018 to 2023 and make sure to use only durg induced cases
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants")
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants")
# Filter the data for each complete month in 2018 to 2023
Data_monthly <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and month, then sum deaths per month
Data_monthly <- Data_monthly %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_monthly <- Data_monthly %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_monthly <- Data_monthly  %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Create 'treatment' and 'post_policy' variables
Data_monthly <- Data_monthly %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
# Create a new date column by combining year and month
Data_monthly <- Data_monthly %>%
mutate(date = ym(paste(year, month, sep = "-")))  # Combine year and month into a date
# Difference-in-Differences (DiD) regression model with Deaths_per_100000
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_monthly)
summary(did_model)
# Robust standard errors to handle heteroscedasticity
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths_per_100000")
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants")
# Filter the data for each complete month in 2018 to 2023
Data_monthly <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and month, then sum deaths per month
Data_monthly <- Data_monthly %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_monthly <- Data_monthly %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_monthly <- Data_monthly  %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Create 'treatment' and 'post_policy' variables
Data_monthly <- Data_monthly %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
# Create a new date column by combining year and month
Data_monthly <- Data_monthly %>%
mutate(date = ym(paste(year, month, sep = "-")))  # Combine year and month into a date
# Difference-in-Differences (DiD) regression model with Deaths_per_100000
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_monthly)
summary(did_model)
# Robust standard errors to handle heteroscedasticity
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Regression Discontinuity Analysis: To further validate the DiD results
# Filter the data for the entire period from 2018 to 2023
Data_RD <- Data_monthly %>%
filter(date >= as.Date("2018-01-01") & date <= as.Date("2023-12-01") & `Occurrence State` == "Oregon")
# Create a binary variable for the policy change
Data_RD <- Data_RD %>%
mutate(policy_change = ifelse(date >= as.Date("2021-02-01"), 1, 0))
# Fit a regression model to estimate the effect of the policy change
rd_model <- lm(Deaths_per_100000 ~ policy_change, data = Data_RD)
summary(rd_model)
# Robust standard errors to handle heteroscedasticity
coeftest(rd_model, vcov = vcovHC(rd_model, type = "HC1"))
# Plot the regression discontinuity analysis
ggplot(Data_RD, aes(x = date, y = Deaths_per_100000, color = as.factor(policy_change))) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
# Legend
scale_color_manual(values = c("0" = "blue", "1" = "red"), labels = c("Before Policy", "After Policy")) +
labs(title = "Regression Discontinuity Analysis",
subtitle = "Effect of Oregon Policy Change in 2021 (Oregon Only)",
x = "Date", y = "Deaths per 100,000 inhabitants")
# Make a Difference-in-Differences model for the years 2018-2020 as a placebo test
Data_placebo <- Data_monthly %>%
filter(date >= as.Date("2018-01-01") & date <= as.Date("2020-12-01"))
# Create 'treatment' and 'post_policy' variables for the placebo test
Data_placebo <- Data_placebo %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2019, 1, 0),  # 1 for years 2019 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
# Difference-in-Differences (DiD) model for the placebo test
did_model_placebo <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_placebo)
summary(did_model_placebo)
# Robust standard errors for the placebo test
coeftest(did_model_placebo, vcov = vcovHC(did_model_placebo, type = "HC1"))
# Filter the data for Oregon and clean it
data_oregon <- Data %>%
filter(`Occurrence State` == "Oregon") %>%
filter(!Deaths == "Suppressed") %>%   # Handle suppressed values (remove them for now)
mutate(Deaths = as.numeric(Deaths),    # Convert Deaths to numeric
date = as.Date(paste0(Month, "-01")))  # Create a proper date column
# Create a time series object for Oregon deaths
ts_oregon <- ts(data_oregon$Deaths, start = c(2018, 1), frequency = 12)
# Split the data for training (2018-2022) and validation (2023)
train_ts <- window(ts_oregon, end = c(2022, 12))
valid_ts <- window(ts_oregon, start = c(2023, 1), end = c(2023, 12))
full_train_ts <- window(ts_oregon, end = c(2023, 12))
# Fit an ARIMA model (or other model)
arima_model <- auto.arima(train_ts)
full_arima_model <- auto.arima(full_train_ts)
# Forecast for the validation period (2023-2024)
forecast_2023_2024 <- forecast(arima_model, h = 12)
# Plot the forecast against the actual validation data
plot(forecast_2023_2024)
lines(valid_ts, col = "red")  # Add the actual data for comparison
legend("topright", legend = c("Forecast", "Actual Data"), col = c("blue", "red"), lty = 1)
# compute the accuracy of the model
accuracy(forecast_2023_2024, valid_ts)
# After validating the model, forecast for 2025
forecast_2025 <- forecast(full_arima_model, h = 12)
# Plot the forecast for 2025
plot(forecast_2025, main = "Forecast for Drug-Related Deaths in Oregon (2025)",
xlab = "Year", ylab = "Deaths per 100,000 inhabitants")
# Filter the data for Oregon and clean it
data_oregon <- Data %>%
filter(`Occurrence State` == "Oregon") %>%
filter(!Deaths == "Suppressed") %>%   # Handle suppressed values (remove them for now)
mutate(Deaths = as.numeric(Deaths),    # Convert Deaths to numeric
date = as.Date(paste0(Month, "-01")))  # Create a proper date column
# Create a time series object for Oregon deaths
ts_oregon <- ts(data_oregon$Deaths, start = c(2018, 1), frequency = 12)
# Split the data for training (2018-2022) and validation (2023)
train_ts <- window(ts_oregon, end = c(2022, 12))
valid_ts <- window(ts_oregon, start = c(2023, 1), end = c(2023, 12))
full_train_ts <- window(ts_oregon, end = c(2023, 12))
# Fit an ARIMA model (or other model)
arima_model <- auto.arima(train_ts)
full_arima_model <- auto.arima(full_train_ts)
# Forecast for the validation period (2023-2024)
forecast_2023_2024 <- forecast(arima_model, h = 12)
# Plot the forecast against the actual validation data
plot(forecast_2023_2024)
lines(valid_ts, col = "red")  # Add the actual data for comparison
legend("topright", legend = c("Forecast", "Actual Data"), col = c("blue", "red"), lty = 1)
# compute the accuracy of the model
accuracy(forecast_2023_2024, valid_ts)
# After validating the model, forecast for 2025
forecast_2025 <- forecast(full_arima_model, h = 12)
# Plot the forecast for 2025
plot(forecast_2025, main = "Forecast for Drug-Related Deaths in Oregon (2025)",
xlab = "Year", ylab = "Deaths per 100,000 inhabitants")
library(readxl)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lmtest)
library(sandwich)
library(forecast)
#globally exclude code chunks from the output
knitr::opts_chunk$set(echo = FALSE)
#globally turn on caching
knitr::opts_chunk$set(cache = TRUE)
# globally turn off warnings and messages
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
# globally set the theme for ggplot
theme_set(theme_minimal())
#setting directory
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# load the relevant part of the Data set, exclude notes starting from row 4374
Data <- read_excel("data/Drug_related_Deaths_2018-2024.xlsx", n_max = 4374)
# Overview for the Data
head(Data, 10)
str(Data)
# Read population data from Excel file for each region
# Load the population data from the first range (D244:M244)
population_oregon_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Oregon",
range = "D244:M244",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range (Q244:T244)
population_oregon_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Oregon",
range = "Q244:T244",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_oregon <- cbind(population_oregon_1, population_oregon_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_oregon) <- 2010:2023
# Load the population data from the first range in California
population_california_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "California",
range = "D487:M487",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range (Q487:T487)
population_california_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "California",
range = "Q487:T487",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_california <- cbind(population_california_1, population_california_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_california) <- 2010:2023
# Load the population data from the first range in Washington
population_washington_1 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Washington",
range = "D286:M286",
col_names = FALSE)  # Disable header reading
# Load the population data from the second range
population_washington_2 <- read_excel("data/Ca_Or_Wa Population 2010-23.xlsx",
sheet = "Washington",
range = "Q286:T286",
col_names = FALSE)  # Disable header reading
# Combine the two data frames (horizontally) into one row
population_washington <- cbind(population_washington_1, population_washington_2)
# Manually set the column names (years 2010 to 2023)
colnames(population_washington) <- 2010:2023
# Combine population data into a single data frame with an added column for state
population_data <- bind_rows(
population_oregon %>% mutate(State = "Oregon"),
population_washington %>% mutate(State = "Washington"),
population_california %>% mutate(State = "California")
)
# Remove the temporary variables from the environment
rm(population_oregon_1, population_oregon_2, population_washington_1,
population_washington_2, population_california_1, population_california_2,
population_oregon, population_washington, population_california)
# Convert wide format to long format
population_data <- population_data %>%
pivot_longer(cols = -State,    # All columns except 'State'
names_to = "year",   # The new column for years
values_to = "population_count")  # The new column for population counts
#Convert year column to numeric
population_data$year <- as.numeric(population_data$year)
# look into Dates
unique(Data$Month)
# Delete Row Sep., 2024 since the data is not complete
Data <- Data[Data$Month != "Sep., 2024 (provisional and partial)", ]
# Create column Provisional (TRUE/FALSE) based on the col Month '(provisional)'
Data$Provisional <- grepl("\\(provisional\\)", Data$Month)
# Delete " (provisional)" from the Date
####Data$Month <- gsub(" \\(provisional\\)", "", Data$Month)
# Convert into Date Variable
####Data$Month <- as.yearmon(Data$Month, format = "%b., %Y")
Data <- Data %>%
#mutate(`Month` = as.yearmon(`Month Code`, format = "%Y/%m"))
mutate(`Month` = ym(`Month Code`))
#### look into Deaths
#### Data$Deaths
# count of "Suppressed"
sum(Data$Deaths == "Suppressed")
# Some of the numbers are "Suppressed" this means that there are between 1 and 9 cases
# To use Deaths as a number we can leave them as NA's or substitute by a random number between 1 and 9
# Set seed for reproducibility if needed
set.seed(23)
# Replace "Suppressed" in the Death column with a random number between 1 and 9
Data$Deaths <- ifelse(Data$Deaths == "Suppressed", sample(1:9, sum(Data$Deaths == "Suppressed"), replace = TRUE), Data$Deaths)
Data$Deaths <- as.numeric(Data$Deaths)
summary(Data)
sum(Data$Deaths == "Suppressed")
# Delete all columns that end on Code, they are duplicates of the other columns
Data <- Data[, !grepl("Code$", names(Data))]
# keep one version of the Dataset with all Deaths
Data_complete <- Data
# Filters the data to only include drug-induced deaths (removes alcohol-induced and non-drug related deaths)
Data <- Data %>% filter(`UCD - Drug/Alcohol Induced` == "Drug-induced causes")
glimpse(Data)
View(Data_complete)
# Filter the data for each complete years 2018 to 2023 and make sure to use only durg induced cases
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants")
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants")
