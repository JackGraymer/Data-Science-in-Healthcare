# Create column Provisional (TRUE/FALSE) based on the col Month '(provisional)'
Data$Provisional <- grepl("\\(provisional\\)", Data$Month)
# Delete " (provisional)" from the Date
####Data$Month <- gsub(" \\(provisional\\)", "", Data$Month)
# Convert into Date Variable
####Data$Month <- as.yearmon(Data$Month, format = "%b., %Y")
Data <- Data %>%
#mutate(`Month` = as.yearmon(`Month Code`, format = "%Y/%m"))
mutate(`Month` = ym(`Month Code`))
#### look into Deaths
#### Data$Deaths
# count of "Suppressed"
sum(Data$Deaths == "Suppressed")
# Some of the numbers are "Suppressed" this means that there are between 1 and 9 cases
# To use Deaths as a number we can leave them as NA's or substitute by a random number between 1 and 9
# Set seed for reproducibility if needed
set.seed(23)
# Replace "Suppressed" in the Death column with a random number between 1 and 9
Data$Deaths <- ifelse(Data$Deaths == "Suppressed", sample(1:9, sum(Data$Deaths == "Suppressed"), replace = TRUE), Data$Deaths)
Data$Deaths <- as.numeric(Data$Deaths)
summary(Data)
sum(Data$Deaths == "Suppressed")
# Delete all columns that end on Code, they are duplicates of the other columns
Data <- Data[, !grepl("Code$", names(Data))]
# keep one version of the Dataset with all Deaths
Data_complete <- Data
# Filters the data to only include drug-induced deaths (removes alcohol-induced and non-drug related deaths)
Data <- Data %>% filter(`UCD - Drug/Alcohol Induced` == "Drug-induced causes")
glimpse(Data)
# Filter the data for each complete years 2018 to 2023
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants")
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Inhabitants by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants")
# Prepare the data untill 2023
data_gender_year <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12")) %>%
select(Gender, Month, Deaths) %>%
group_by(Gender, Month) %>%
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
# Plot the data
ggplot(data_gender_year, aes(x = Month, y = Total_Deaths, color = Gender, group = Gender)) +
geom_line() +
geom_point() +
labs(title = "Number of Deaths by Gender and Year",
x = "Year",
y = "Total Deaths",
color = "Gender")
# Perform t-test for significant differences by gender
t.test(Total_Deaths ~ Gender, data = data_gender_year)
# Prepare the data
#use quarterly data to make it smoother
data_Anova <- Data %>%
filter(`Month` < ym("2021-02")) %>%
mutate(Quarter = floor_date(as.Date(Month), "quarter")) %>%
select(Gender, Quarter, `Occurrence State`, Deaths) %>%
group_by(Gender, Quarter, `Occurrence State`) %>%
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
data_Anova$all_death <- Data_complete %>%
filter(`Month` < ym("2021-02")) %>%
mutate(Quarter = floor_date(as.Date(Month), "quarter")) %>%
select(Gender, Quarter, `Occurrence State`, Deaths) %>%
group_by(Gender, Quarter, `Occurrence State`) %>%
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup() %>%
pull(Total_Deaths)
data_Anova$DrugDeath_Percentage <- data_Anova$Total_Deaths / data_Anova$all_death *100
# Plot the data
ggplot(data_Anova, aes(x = Quarter, y = DrugDeath_Percentage, color = `Occurrence State`, linetype = Gender)) +
geom_line() +
geom_point() +
labs(title = "Number of Deaths by Gender and State (Quarterly Data)",
x = "Year",
y = "Percentage of Drugdeaths",
color = "State")
# Perform ANOVA for significant differences by gender or State
data_Anova <- data_Anova %>%
mutate(Gender = as.factor(Gender),
`Occurrence State` = as.factor(`Occurrence State`))
# Test for effects in Gender, State and interactions
anova_model <- aov(DrugDeath_Percentage ~ Gender + `Occurrence State`, data = data_Anova)
summary(anova_model)
# Filter the data for each complete month in 2018 to 2023
Data_monthly <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and month, then sum deaths per month
Data_monthly <- Data_monthly %>%
group_by(`Occurrence State`, year = year(`Month`), month = month(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_monthly <- Data_monthly %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_monthly <- Data_monthly  %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Create 'treatment' and 'post_policy' variables
Data_monthly <- Data_monthly %>%
mutate(
treatment = ifelse(`Occurrence State` == "Oregon", 1, 0),  # 1 for Oregon, 0 for California/Washington
post_policy = ifelse(year >= 2021, 1, 0),  # 1 for years 2021 and later
interaction = treatment * post_policy  # Interaction term for DiD
)
# Create a new date column by combining year and month
Data_monthly <- Data_monthly %>%
mutate(date = ym(paste(year, month, sep = "-")))  # Combine year and month into a date
# Difference-in-Differences (DiD) regression model with Deaths_per_100000
did_model <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction, data = Data_monthly)
summary(did_model)
# Robust standard errors to handle heteroscedasticity
coeftest(did_model, vcov = vcovHC(did_model, type = "HC1"))
# Plot DiD Results
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths_per_100000")
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants")
# Subset data for Oregon and Washington
oregon_data <- Data_monthly %>% filter(`Occurrence State` == "Oregon")
washington_data <- Data_monthly %>% filter(`Occurrence State` == "Washington")
# Calculate the correlation coefficient between the two states
correlation <- cor(oregon_data$Deaths_per_100000, washington_data$Deaths_per_100000)
# Print the result
correlation
#Seperate DiD
# Example for DiD with only California as control
did_model_california <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction,
data = Data_monthly %>% filter(`Occurrence State` %in% c("Oregon", "California")))
# Example for DiD with only Washington as control
did_model_washington <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction,
data = Data_monthly %>% filter(`Occurrence State` %in% c("Oregon", "Washington")))
# Compare the results
summary(did_model_california)
summary(did_model_washington)
# Panel Data Analysis
# Create a panel data set for the analysis
panel_data <- Data_monthly %>%
select(`Occurrence State`, date, Deaths_per_100000) %>%
mutate(State = factor(`Occurrence State`)) %>%
select(-`Occurrence State`)
# Aggregate the data to ensure unique state and date combinations
panel_data <- panel_data %>%
group_by(State, date) %>%
summarise(Deaths_per_100000 = sum(Deaths_per_100000, na.rm = TRUE)) %>%
ungroup()
# Convert the data to a pdata.frame
pdata <- pdata.frame(panel_data, index = c("State", "date"))
# Fit a panel data model to assess the impact of the policy change
panel_model <- plm(Deaths_per_100000 ~ lag(Deaths_per_100000, 1), data = pdata, model = "within")
# Summarize the model
summary(panel_model)
# Robust standard errors for the panel data model
coeftest(panel_model, vcov = vcovHC(panel_model, type = "HC1"))
# Extract the index (State, Date) for the fitted model to align with fitted values
model_index <- index(panel_model)
# Create a dataframe with fitted values and corresponding index (State, Date)
fitted_data <- data.frame(State = model_index$State,
date = model_index$date,
Fitted = fitted(panel_model))
# Merge the fitted data with the original panel_data based on State and Date
panel_data_with_fitted <- merge(panel_data, fitted_data, by = c("State", "date"))
# Plot the panel data model results using ggplot2
ggplot(panel_data_with_fitted, aes(x = date, y = Deaths_per_100000, color = State)) +
geom_point() +
geom_line(aes(y = Deaths_per_100000), linetype = "solid") +  # Plot actual Deaths_per_100000 as solid line
labs(title = "Panel Data Model Results",
x = "Date",
y = "Deaths_per_100000",
color = "State") +
theme_minimal()
ggplot(panel_data_with_fitted, aes(x = date, y = Deaths_per_100000, color = State)) +
geom_point() +
geom_line(aes(y = Deaths_per_100000), linetype = "solid") +  # Plot actual Deaths_per_100000 as solid line
geom_line(aes(y = Fitted), linetype = "dashed") +  # Plot fitted values as dashed line
labs(title = "Panel Data Model Results",
x = "date",
y = "Deaths_per_100000",
color = "State") +
theme_minimal()
# Subset data for Oregon and Washington
oregon_data <- Data_monthly %>% filter(`Occurrence State` == "Oregon")
washington_data <- Data_monthly %>% filter(`Occurrence State` == "Washington")
california_data <- Data_monthly %>% filter(`Occurrence State` == "California")
# Calculate the correlation coefficient between the two states
correlation <- cor(oregon_data$Deaths_per_100000, washington_data$Deaths_per_100000)
coorelation_c <- cor(oregon_data$Deaths_per_100000, california_data$Deaths_per_100000)
# Print the result
correlation
coorelation_c
#Seperate DiD
# Subset data for Oregon and Washington
oregon_data <- Data_monthly %>% filter(date >= as.Date("2018-01-01") & date <= as.Date("2021-12-01") & `Occurrence State` == "Oregon")
washington_data <- Data_monthly %>% filter(date >= as.Date("2018-01-01") & date <= as.Date("2021-12-01") & `Occurrence State` == "Washington")
california_data <- Data_monthly %>% filter(date >= as.Date("2018-01-01") & date <= as.Date("2021-12-01") & `Occurrence State` == "California")
# Calculate the correlation coefficient between the two states
correlation <- cor(oregon_data$Deaths_per_100000, washington_data$Deaths_per_100000)
coorelation_c <- cor(oregon_data$Deaths_per_100000, california_data$Deaths_per_100000)
# Print the result
correlation
coorelation_c
#Seperate DiD
# Example for DiD with only California as control
did_model_california <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction,
data = Data_monthly %>% filter(`Occurrence State` %in% c("Oregon", "California")))
# Example for DiD with only Washington as control
did_model_washington <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction,
data = Data_monthly %>% filter(`Occurrence State` %in% c("Oregon", "Washington")))
# Compare the results
summary(did_model_california)
summary(did_model_washington)
# Subset data for Oregon and Washington pre Policy
oregon_data <- Data_monthly %>% filter(date >= as.Date("2018-01-01") & date <= as.Date("2021-02-01") & `Occurrence State` == "Oregon")
washington_data <- Data_monthly %>% filter(date >= as.Date("2018-01-01") & date <= as.Date("2021-02-01") & `Occurrence State` == "Washington")
california_data <- Data_monthly %>% filter(date >= as.Date("2018-01-01") & date <= as.Date("2021-02-01") & `Occurrence State` == "California")
# Calculate the correlation coefficient between the two states
correlation <- cor(oregon_data$Deaths_per_100000, washington_data$Deaths_per_100000)
coorelation_c <- cor(oregon_data$Deaths_per_100000, california_data$Deaths_per_100000)
# Print the result
correlation
coorelation_c
#Seperate DiD
# Example for DiD with only California as control
did_model_california <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction,
data = Data_monthly %>% filter(`Occurrence State` %in% c("Oregon", "California")))
# Example for DiD with only Washington as control
did_model_washington <- lm(Deaths_per_100000 ~ treatment + post_policy + interaction,
data = Data_monthly %>% filter(`Occurrence State` %in% c("Oregon", "Washington")))
# Compare the results
summary(did_model_california)
summary(did_model_washington)
View(oregon_data)
View(Data_monthly)
knitr::opts_chunk$set(echo = TRUE)
# Regression Discontinuity Analysis: To further validate the DiD results
# Create a binary variable for the policy change
Data_RD <- Data_monthly %>%
mutate(policy_change = ifelse(date >= as.Date("2021-02-01"), 1, 0))
library(readxl)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lmtest)
library(sandwich)
library(forecast)
library(plm)
#globally exclude code chunks from the output
knitr::opts_chunk$set(echo = FALSE)
#globally turn on caching
knitr::opts_chunk$set(cache = TRUE)
# globally turn off warnings and messages
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
# globally set the theme for ggplot
theme_set(theme_minimal())
#setting directory
#setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
# Regression Discontinuity Analysis: To further validate the DiD results
# Create a binary variable for the policy change
Data_RD <- Data_monthly %>%
mutate(policy_change = ifelse(date >= as.Date("2021-02-01"), 1, 0))
# Fit a regression model to estimate the effect of the policy change
rd_model <- lm(Deaths_per_100000 ~ policy_change, data = Data_RD)
summary(rd_model)
# Robust standard errors to handle heteroscedasticity
coeftest(rd_model, vcov = vcovHC(rd_model, type = "HC1"))
# Plot the regression discontinuity analysis
ggplot(Data_RD, aes(x = date, y = Deaths_per_100000, color = as.factor(policy_change))) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
# Legend
scale_color_manual(values = c("0" = "blue", "1" = "red"), labels = c("Before Policy", "After Policy")) +
labs(title = "Regression Discontinuity Analysis",
subtitle = "Effect of Oregon Policy Change in 2021 (Oregon Only)",
x = "Date", y = "Deaths per 100,000 inhabitants")
# Filter the data for Oregon and clean it
data_oregon <- Data %>%
filter(`Occurrence State` == "Oregon") %>%
mutate(Deaths = as.numeric(Deaths),    # Convert Deaths to numeric
date = as.Date(paste0(Month, "-01")))  # Create a proper date column
# Create a time series object for Oregon deaths
ts_oregon <- ts(data_oregon$Deaths, start = c(2018, 1), frequency = 12)
# Split the data for training (2018-2022) and validation (2023)
train_ts <- window(ts_oregon, end = c(2022, 12))
valid_ts <- window(ts_oregon, start = c(2023, 1), end = c(2023, 12))
full_train_ts <- window(ts_oregon, end = c(2023, 12))
# Fit an ARIMA model (or other model)
arima_model <- auto.arima(train_ts)
full_arima_model <- auto.arima(full_train_ts)
# Forecast for the validation period (2023-2024)
forecast_2023_2024 <- forecast(arima_model, h = 12)
# Plot the forecast against the actual validation data
plot(forecast_2023_2024)
lines(valid_ts, col = "red")  # Add the actual data for comparison
legend("topright", legend = c("Forecast", "Actual Data"), col = c("blue", "red"), lty = 1)
# compute the accuracy of the model
accuracy(forecast_2023_2024, valid_ts)
# After validating the model, forecast for 2025
forecast_2025 <- forecast(full_arima_model, h = 12)
# Plot the forecast for 2025
plot(forecast_2025, main = "Forecast for Drug-Related Deaths in Oregon (2025)",
xlab = "Year", ylab = "Deaths per 100,000 inhabitants")
# Filter the data for each complete years 2018 to 2023
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100'000 Inhabitants (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants")
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Residents by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants")
# Prepare the data untill 2023
data_gender_year <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12")) %>%
select(Gender, Month, Deaths) %>%
group_by(Gender, Month) %>%
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
# Plot the data
ggplot(data_gender_year, aes(x = Month, y = Total_Deaths, color = Gender, group = Gender)) +
geom_line() +
geom_point() +
labs(title = "Number of Deaths by Gender and Year",
x = "Year",
y = "Total Deaths",
color = "Gender")
# Perform t-test for significant differences by gender
t.test(Total_Deaths ~ Gender, data = data_gender_year)
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Residents by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
ylim(0, 80) +  # Ensure y-axis starts at 0
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Residents by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
ylim(0, 80)
# Filter the data for each complete years 2018 to 2023
Data_18_23 <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12"))
# Group the data by occurrence state and year, then sum deaths per year
Data_18_23 <- Data_18_23 %>%
group_by(`Occurrence State`, year = year(`Month`)) %>%
summarise(Deaths = sum(Deaths))
# Merge the death data with population data by state and year
Data_with_population <- Data_18_23 %>%
left_join(population_data, by = c("Occurrence State" = "State", "year" = "year"))
# Calculate deaths per 100,000 inhabitants for each year
Data_with_population <- Data_with_population %>%
mutate(Deaths_per_100000 = (Deaths / population_count) * 100000)
# Plot the number of deaths per 10,000 inhabitants for each year and state
ggplot(Data_with_population, aes(x = factor(year), y = Deaths_per_100000, fill = `Occurrence State`)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Drug-Related Deaths per 100,000 Residents by State (2018-2023)",
x = "Year",
y = "Deaths per 100'000 Inhabitants")
# Plot the trends over time for each state per year
ggplot(Data_with_population, aes(x = year, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = 2021, linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths per 100,000 Residents by State",
subtitle = "Oregon policy change in 2021",
x = "Year", y = "Deaths per 100,000 inhabitants") +
ylim(0, 80)   # Ensure y-axis starts at 0
# Prepare the data untill 2023
data_gender_year <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12")) %>%
select(Gender, Month, Deaths) %>%
group_by(Gender, Month) %>%
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
# Plot the data
ggplot(data_gender_year, aes(x = Month, y = Total_Deaths, color = Gender, group = Gender)) +
geom_line() +
geom_point() +
labs(title = "Number of Deaths by Gender and Year",
x = "Year",
y = "Total Deaths",
color = "Gender") +
ylim(0, 1500)
# Perform t-test for significant differences by gender
t.test(Total_Deaths ~ Gender, data = data_gender_year)
# Prepare the data untill 2023
data_gender_year <- Data %>%
filter(`Month` >= ym("2018-01") & `Month` <= ym("2023-12")) %>%
select(Gender, Month, Deaths) %>%
group_by(Gender, Month) %>%
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE)) %>%
ungroup()
# Plot the data
ggplot(data_gender_year, aes(x = Month, y = Total_Deaths, color = Gender, group = Gender)) +
geom_line() +
geom_point() +
labs(title = "Number of Deaths by Gender and Year (Oregon)",
x = "Year",
y = "Total Deaths",
color = "Gender") +
ylim(0, 1500)
# Perform t-test for significant differences by gender
t.test(Total_Deaths ~ Gender, data = data_gender_year)
# Plot DiD Results
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths_per_100000")
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants")
# Plot DiD Results
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths per 100000")
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants")
View(Data_monthly)
# Plot DiD Results
# Plot the trends over time for each state
ggplot(Data_monthly, aes(x = date, y = Deaths_per_100000, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Drug-Related Deaths by State per 100000",
subtitle = "Oregon policy change in February 2021",
x = "Year", y = "Deaths per 100'000") +
ylim(0, 5)
# Generate predicted values based on the model
Data_monthly$predicted <- predict(did_model, newdata = Data_monthly)
# Visualize the predicted trends
ggplot(Data_monthly, aes(x = date, y = predicted, color = `Occurrence State`)) +
geom_line(linewidth = 1.2) +
geom_vline(xintercept = as.Date("2021-02-01"), linetype = "dashed", color = "red") +  # Mark the policy change
labs(title = "Predicted Drug-Related Deaths per 100,000 Over Time",
subtitle = "Oregon vs Control States",
x = "Date", y = "Predicted Deaths per 100,000 inhabitants")
